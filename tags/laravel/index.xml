<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>laravel on 代码笔记</title>
    <link>https://glitterlip.github.io/tags/laravel/</link>
    <description>Recent content in laravel on 代码笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 06 Sep 2024 03:44:13 +0800</lastBuildDate><atom:link href="https://glitterlip.github.io/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Filamentphp</title>
      <link>https://glitterlip.github.io/blog/2024-09/filamentphp/</link>
      <pubDate>Fri, 06 Sep 2024 03:44:13 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2024-09/filamentphp/</guid>
      <description>filamentphp 是可以修改代码自动刷新页面的,不仅是blade文件,resource文件也可以 同事做的项目初始化,我接手的时候,filament已经安装好了,无奈hot reload一直不行,每次改完都要按一下刷新,太难了 按照以下步骤检查了配置 env的APP_URL配置正确 vite的配置也对 import {defineConfig} from &amp;#39;vite&amp;#39;; import laravel from &amp;#39;laravel-vite-plugin&amp;#39;; export default defineConfig({ plugins: [ laravel({ input: [ &amp;#39;resources/css/app.css&amp;#39;, &amp;#39;resources/js/app.js&amp;#39;, &amp;#39;resources/css/filament/admin/theme.css&amp;#39; ], refresh: true, }), ], }); tailwindcss也没啥问题 import defaultTheme from &amp;#39;tailwindcss/defaultTheme&amp;#39;; import forms from &amp;#39;@tailwindcss/forms&amp;#39;; /** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */ export default { content: [ &amp;#39;./vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php&amp;#39;, &amp;#39;./storage/framework/views/*.php&amp;#39;, &amp;#39;./resources/views/**/*.blade.php&amp;#39;, ],</description>
    </item>
    
    <item>
      <title>laravel tinker 方向键失效</title>
      <link>https://glitterlip.github.io/blog/2023-12/laravel-tinker-%E6%96%B9%E5%90%91%E9%94%AE%E5%A4%B1%E6%95%88/</link>
      <pubDate>Sun, 24 Dec 2023 20:12:36 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2023-12/laravel-tinker-%E6%96%B9%E5%90%91%E9%94%AE%E5%A4%B1%E6%95%88/</guid>
      <description>本机用的zsh+iterm2,使用tinker时,是可以通过上下方向键查找历史命令,左右方向键移动光标的,奈何ssh到服务器就乱码了,每次都要edit使用vim来改,改完再保存执行,真的蛋疼. 具体是在tinker中 按上下左右方向键,出来的确是^[[A^[[B^[[D^[[C 乱码. 开始以为是iterm2的问题,因为之前碰到过iterm2 和 tmux 异常滚动的问题 改了几个参数没有效果&amp;hellip;. 继续go</description>
    </item>
    
    <item>
      <title>Livewirejs 404问题</title>
      <link>https://glitterlip.github.io/blog/2023-10/livewirejs-404%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 03 Oct 2023 00:06:23 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2023-10/livewirejs-404%E9%97%AE%E9%A2%98/</guid>
      <description>laravel项目,装了filament作为后台,本地开发没问题,线上发布之后无法登录. 具体表现是点了登录按钮只是刷新页面,确认帐号密码是正确的. 打开控制台后资源加载报错/livewire/livewire.js not found php artisan route:list|grep livewire是有记录返回的 最后确定是nginx配置问题,当成静态文件去public目录找肯定是没有的,关闭缓存也不现实呢 location ~ .*\.(js|css)?$ { expires 12h; error_log /dev/null; access_log /dev/null; } 改成下面就可以了 location = /livewire/livewire.js { expires off; try_files $uri</description>
    </item>
    
    <item>
      <title>Laravel发送响应return后执行代码</title>
      <link>https://glitterlip.github.io/blog/2023-01/laravel%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94return%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 05 Jan 2023 16:45:57 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2023-01/laravel%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94return%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid>
      <description>有时候处理请求时，有些日志收尾工作，直接处理吧增加响应时间，建个job放队列处理又感觉没啥必要 比如记录访问者日志信息，我们会根据ip去调用go服务查询asn，country code，city，大致的经纬度，访问了资源会把访问次数+1 这两个任务开始的时候一个放队列处理，一个缓存访问量+1，差值达到阈值之后再保存落库。 Laravel的文档介绍了中间件的terminate方法，问题是可能还没开始处理请求</description>
    </item>
    
    <item>
      <title>golang实现laravel的cache remember方法</title>
      <link>https://glitterlip.github.io/blog/2022-12/golang%E5%AE%9E%E7%8E%B0laravel%E7%9A%84cache-remember%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 27 Dec 2022 10:15:14 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-12/golang%E5%AE%9E%E7%8E%B0laravel%E7%9A%84cache-remember%E6%96%B9%E6%B3%95/</guid>
      <description>怀念laravel的缓存，太方便了，用golang实现一下 安利一下这个包 gookit/cache type Cache interface { // basic operation Has(key string) bool Get(key string) interface{} Set(key string, val interface{}, ttl time.Duration) (err error) Del(key string) error // multi operation GetMulti(keys []string) map[string]interface{} SetMulti(values map[string]interface{}, ttl time.Duration) (err error) DelMulti(keys []string) error // clear and close Clear() error Close() error } 这个包通过适配各种常用的缓存驱动来提供统一的封装好的缓存操作方法。切换驱动只需要一行代码就行。 func Remember(ctx context.Context, pointer interface{}, key string, ttl time.Duration, cb func() error) error { if cache.Has(key) { //如果缓存有值，则反序列化 return Json.Unmarshal(cache.Get(key).([]byte), pointer) } else { //如果没有值，调用callback， err := cb() if err != nil { return err } /</description>
    </item>
    
    <item>
      <title>Laravel查看缓存剩余时间</title>
      <link>https://glitterlip.github.io/blog/2022-10/laravel%E6%9F%A5%E7%9C%8B%E7%BC%93%E5%AD%98%E5%89%A9%E4%BD%99%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 22 Oct 2022 16:44:28 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-10/laravel%E6%9F%A5%E7%9C%8B%E7%BC%93%E5%AD%98%E5%89%A9%E4%BD%99%E6%97%B6%E9%97%B4/</guid>
      <description>laravel当配置redis为缓存时查看缓存的剩余时间 Laravel版本9.12 Laravel的缓存配置文件config/cache.php &amp;#39;prefix&amp;#39; =&amp;gt; env(&amp;#39;CACHE_PREFIX&amp;#39;, Str::slug(env(&amp;#39;APP_NAME&amp;#39;, &amp;#39;laravel&amp;#39;), &amp;#39;_&amp;#39;).&amp;#39;_cache&amp;#39;) Laravel的数据库配置文件config/database.php &amp;#39;redis&amp;#39; =&amp;gt; [ &amp;#39;client&amp;#39; =&amp;gt; env(&amp;#39;REDIS_CLIENT&amp;#39;, &amp;#39;phpredis&amp;#39;), &amp;#39;options&amp;#39; =&amp;gt; [ &amp;#39;cluster&amp;#39; =&amp;gt; env(&amp;#39;REDIS_CLUSTER&amp;#39;, &amp;#39;redis&amp;#39;), &amp;#39;prefix&amp;#39; =&amp;gt; env(&amp;#39;REDIS_PREFIX&amp;#39;, Str::slug(env(&amp;#39;APP_NAME&amp;#39;, &amp;#39;laravel&amp;#39;), &amp;#39;_&amp;#39;) . &amp;#39;_database_&amp;#39;), ], ] Laravel 缓存key的生成规则为config(&#39;database.redis.options.prefix&#39;).config(&#39;cache</description>
    </item>
    
    <item>
      <title>Laravel Job添加telescope Tags</title>
      <link>https://glitterlip.github.io/blog/2022-10/laravel-job%E6%B7%BB%E5%8A%A0telescope-tags/</link>
      <pubDate>Sat, 01 Oct 2022 14:57:40 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-10/laravel-job%E6%B7%BB%E5%8A%A0telescope-tags/</guid>
      <description>请求添加tag laravel开了telescope，请求添加tag还好说 //直接在TelescopeServiceProvider的register方法判断就好了 Telescope::tag(function (IncomingEntry $entry) { if ($entry-&amp;gt;isRequest()){ $tags = []; $tags[] = preg_replace(&amp;#39;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&amp;#39;, &amp;#39;$1.$2.*.*&amp;#39;, request()-&amp;gt;getClientIp()); $tags[] = preg_replace(&amp;#39;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&amp;#39;, &amp;#39;$1.$2.$3.*&amp;#39;, request()-&amp;gt;getClientIp()); $tags[] = $t; if (! request()-&amp;gt;header(&amp;#39;referer&amp;#39;) ) { $tags[] = &amp;#39;noreferer&amp;#39;; } return $tags; } }); job添加tag 想给job添加tag,而且需要根据job的数据添加tag,直接在job方法中新增一个tags方法即可 &amp;lt;?php namespace App\Jobs; class XXJob implements ShouldQueue, ShouldBeUnique { use Dispatchable, InteractsWithQueue, Queueable, SerializesModels; public $id; public function __construct($id) { $this-&amp;gt;id = $id; } public function</description>
    </item>
    
    <item>
      <title>laravel telescope get response code</title>
      <link>https://glitterlip.github.io/snippet/telescope-response-code/</link>
      <pubDate>Wed, 20 Jul 2022 09:53:11 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/snippet/telescope-response-code/</guid>
      <description>Telescope::tag(function (IncomingEntry $entry) { $tags = []; if ( $entry-&amp;gt;isRequest() ) { if ( $entry-&amp;gt;content[&amp;#39;response_status&amp;#39;] == 302 ) { $tags[] = &amp;#39;redirect&amp;#39;; } } return $tags; }); </description>
    </item>
    
  </channel>
</rss>
