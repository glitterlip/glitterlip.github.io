<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 代码笔记</title>
    <link>https://glitterlip.github.io/tags/golang/</link>
    <description>Recent content in golang on 代码笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sat, 05 Nov 2022 22:57:57 +0800</lastBuildDate><atom:link href="https://glitterlip.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>412</title>
      <link>https://glitterlip.github.io/snippet/leetcode/412/</link>
      <pubDate>Sat, 05 Nov 2022 22:57:57 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/snippet/leetcode/412/</guid>
      <description>412. Fizz Buzz 题目 Write a program that outputs the string representation of numbers from 1 to n. But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”. Example: n = 15, Return: [ &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;Buzz&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;Buzz&amp;#34;, &amp;#34;11&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;13&amp;#34;, &amp;#34;14&amp;#34;, &amp;#34;FizzBuzz&amp;#34; ] 题目大意 3的倍数输出 &amp;ldquo;Fizz&amp;rdquo;，5的倍数输出 &amp;ldquo;Buzz&amp;rdquo;，15的倍数输出 &amp;ldquo;FizzBuzz&amp;rdquo;，其他时候都输出原本的数字。 解题思路 按照题意</description>
    </item>
    
    <item>
      <title>1672</title>
      <link>https://glitterlip.github.io/snippet/leetcode/1672/</link>
      <pubDate>Sat, 05 Nov 2022 00:05:15 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/snippet/leetcode/1672/</guid>
      <description>1672. Richest Customer Wealth 题目 You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. Return the wealth that the richest customer has. A customer&amp;rsquo;s wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth. Example 1: Input: accounts = [[1,2,3],[3,2,1]] Output: 6 Explanation:1st customer has wealth = 1 + 2 + 3 = 6 2nd customer has wealth = 3 + 2 + 1 = 6 Both customers are considered the richest with a wealth of 6 each, so return 6. Example 2: Input: accounts = [[1,5],[7,3],[3,5]] Output: 10 Explanation: 1st customer has wealth = 6 2nd customer has wealth = 10 3rd customer has wealth = 8 The 2nd customer is the richest with a wealth of 10. Example 3: Input: accounts = [[2,8,7],[7,1,3],[1,9,5]] Output: 17 Constraints: m == accounts.length n == accounts[i].length 1 &amp;lt;= m, n &amp;lt;= 50 1 &amp;lt;= accounts[i][j] &amp;lt;= 100 题目大意 给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i</description>
    </item>
    
    <item>
      <title>grpc php客户端与golang服务端通信</title>
      <link>https://glitterlip.github.io/blog/2022-10/grpc-php%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8Egolang%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sat, 15 Oct 2022 19:46:21 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-10/grpc-php%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8Egolang%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1/</guid>
      <description>版本 go version go1.19.1 darwin/arm64 protoc --version libprotoc 3.21.9 projectpath 代表项目根目录 Go服务端 初始化golang项目，编写proto文件 // projectpath/proto/link.proto syntax = &amp;#34;proto3&amp;#34;; package proto; option go_package = &amp;#34;/proto&amp;#34;; service Link{ rpc GetLink(GetLinkRequest) returns (GetLinkResponse){} } message GetLinkRequest{ int32 driver = 1; string linkId = 2; string token = 3; } message GetLinkResponse { int32 code = 1; string link = 2; string pwd = 3; } 安装所需工具 go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 //用于生成xx.pb.go文件 主要是link.proto里面的message对应的go代码 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 //用于生成xx_grpc.pb.go 即grpc服务的go版本服务端和客户端 //安装之后查看是否安</description>
    </item>
    
    <item>
      <title>gin打包html模板和静态资源文件</title>
      <link>https://glitterlip.github.io/blog/2022-09/gin%E6%89%93%E5%8C%85html%E6%A8%A1%E6%9D%BF%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 18 Sep 2022 01:26:18 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-09/gin%E6%89%93%E5%8C%85html%E6%A8%A1%E6%9D%BF%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</guid>
      <description>[GIN-debug] [WARNING] Since SetHTMLTemplate() is NOT thread-safe. It should only be called at initialization. ie. before any route is registered or the router is listening in a socket: router := gin.Default() router.SetHTMLTemplate(template) // &amp;lt;&amp;lt; good place Gin和Echo有点不一样，需要在注册路由之前注册模板 注册子目录的html文件 ├── go.mod ├── go.sum ├── app.go ├── resources │ ├── css │ │ └── input.css │ ├── js │ │ └── tailwind.config.js │ └── views │ ├── detail.html │ ├── home │ │ └── home.index.html │ └── search.html func walkDir(fileSystem embed.FS, path string) { _, err := T.ParseFS(fileSystem, path+&amp;#34;/*.html&amp;#34;) if err != nil { panic(fmt.Sprintf(&amp;#34;parse error:%s&amp;#34;, err.Error())) } entries, _ := fs.ReadDir(fileSystem, path) for _, entry := range entries { if entry.IsDir() { walkDir(fileSystem, path+&amp;#34;/&amp;#34;+entry.Name()) } } } T:=template.New(&amp;#34;view&amp;#34;) T.ParseFS(ResourcesFS, &amp;#34;resources/views/*.html&amp;#34;) entries, _ := ResourcesFS.ReadDir(&amp;#34;resources/views&amp;#34;) for _, entry := range entries { if entry.IsDir() { walkDir(ResourcesFS, &amp;#34;resources/views/&amp;#34;+entry.Name()) } }</description>
    </item>
    
    <item>
      <title>Golang Echo,React Umijs 项目部署</title>
      <link>https://glitterlip.github.io/blog/2022-08/golang-echoreact-umijs-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 18 Aug 2022 15:30:31 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-08/golang-echoreact-umijs-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</guid>
      <description>nginx 配置文件 server { #强制https listen 80; listen [::]:80; server_name project.com; return 301 https://project.com$request_uri; } map $http_upgrade $connection_upgrade { default upgrade; &amp;#39;&amp;#39; close; } server { listen 443 ssl; ssl_certificate /etc/letsencrypt/live/project.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/project.com/privkey.pem; server_name project.com; #默认为umijs 构建产物 location / { root /data/project/project/public/dist; index index.html index.htm; try_files $uri $uri/ /index.html; } location /api { # golang后端api监听18081端口 proxy_pass http://127.0.0.1:18081/api; proxy_set_header Upgrade $http_upgrade; #websocket 链接 proxy_set_header Connection $connection_upgrade; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; } error_log /var/log/nginx/project_error.log; access_log /var/log/nginx/project_access.log; } k8s服务器在国内，这个项目服务器在香港，ci/cd的话直接上传构建产物了，git只作为代码追踪使用 golang echo 部署脚本 #! /bin/bash #打包压缩 GOOS=linux GOARCH=amd64 go build -o project &amp;amp;&amp;amp; zip project.zip project #scp上传</description>
    </item>
    
    <item>
      <title>1480. Running Sum of 1d Array #</title>
      <link>https://glitterlip.github.io/snippet/leetcode/1480/</link>
      <pubDate>Wed, 10 Aug 2022 11:14:43 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/snippet/leetcode/1480/</guid>
      <description>1480. Running Sum of 1d Array 题目 Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums. Example 1: Input: nums = [1,2,3,4] Output: [1,3,6,10] Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. Example 2: Input: nums = [1,1,1,1,1] Output: [1,2,3,4,5] Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. Example 3: Input: nums = [3,1,2,10,1] Output: [3,4,6,16,17] Constraints: 1 &amp;lt;= nums.length &amp;lt;= 1000 -10^6 &amp;lt;= nums[i] &amp;lt;= 10^6 题目大意 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。请返回 nums 的动态和。 解题思路 简单题，按照题意依次循环计算前缀和即</description>
    </item>
    
    <item>
      <title>golang mysql设置时区</title>
      <link>https://glitterlip.github.io/snippet/mysql-loc/</link>
      <pubDate>Sat, 06 Aug 2022 11:14:43 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/snippet/mysql-loc/</guid>
      <description>github.com/go-sql-driver包设置时区 DSN方式追加loc参数，值必须转义,/用%2F替换 DSN: parseTime=true&amp;amp;loc=Asia%2FShanghai</description>
    </item>
    
    <item>
      <title>golang template函数传递多个参数</title>
      <link>https://glitterlip.github.io/blog/2022-07/golang-template%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 19 Jul 2022 09:53:11 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-07/golang-template%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/</guid>
      <description>golang开发web页面时，会把页面的公共部分抽离出来，定义成组件 比如定义一个header，然后其他页面就无需再重复写了，直接引入即可 //header.html {{define &amp;#34;header&amp;#34;}} this is header. Current User:{{.user.Name}} {{end}} //detail.html {{template &amp;#34;header&amp;#34; .user}} 但是此时如果你想再展示天气，你可以定义一个UserWithWeather，这就有点不伦不类了 我们可以定义一个map模板函数 template.New(&amp;#34;view&amp;#34;).Funcs(template.FuncMap{ &amp;#34;mapof&amp;#34;: func(kvpairs ...interface{}) (map[string]interface{}, error) { if len(kvpairs)%2 != 0 { return nil, errors.New(&amp;#34;wrong number of arguements&amp;#34;) } dict := make(map[string]interface{}, len(kvpairs)/2) for i := 0; i &amp;lt; len(kvpairs); i += 2 { key, ok := kvpairs[i].(string) if !ok { return nil, errors.New(&amp;#34;map keys must be strings&amp;#34;) } dict[key] = kvpairs[i+1] } return dict, nil }, })</description>
    </item>
    
    <item>
      <title>golang cron包计划任务不执行</title>
      <link>https://glitterlip.github.io/blog/2022-07/golang-cron%E5%8C%85%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 18 Jul 2022 09:53:11 +0800</pubDate>
      
      <guid>https://glitterlip.github.io/blog/2022-07/golang-cron%E5%8C%85%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C/</guid>
      <description>cron包旧版本中的表达式和常见的linux crontab表达式并不一致， 多了一个秒级别的定时，新版本中v3已经移除了 如果你在使用github.com/robfig/cron/v3这个包的时候遇到计划任务未执行可能是这个原因 使用秒级定时器 c:=cron.New(cron.WithSeconds()) c.AddFunc(&amp;#34;0 30 * * * *&amp;#34;, func() { fmt.Println(&amp;#34;Every hour on the half hour&amp;#34;) }) 不需要秒级定时器 c:=cron.New() c.AddFunc(&amp;#34;30 * * * *&amp;#34;, func() { fmt.Println(&amp;#34;Every hour on the half hour&amp;#34;) })</description>
    </item>
    
  </channel>
</rss>
